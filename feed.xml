<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>한량의 Jekyll 블로그</title>
    <description>안녕하세요. CLI를 모르는 한량이 만든 Jekyll 블로그에 오셨습니다.</description>
    <link>http://halryang.github.io</link>
    <atom:link href="http://halryang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Jekyll에서 Youtube 영상을 Responsive하게 임베딩하기</title>
        <description>&lt;p&gt;Jekyll은 정적인 사이트를 만드는 툴로서, 지금까지 제가 본 바론 글을 쓰기에 최적화 되어 있습니다. Code highlight도 있어 개발자가 쓰기에 딱 좋아보입니다. 하지만 저는 개발은 전혀 모르고 개인 블로그를 가볍게 운영하려고 Jekyll을 사용하고 있습니다. 가끔 Youtube에서 좋은 영상을 발견하면 블로그에 올려두기도 하는데, Jekyll에선 Liquid Tag를 이용해서 Youtube 영상을 공유할 수 있습니다.&lt;/p&gt;

&lt;p&gt;저는 Liquid Tag는 &lt;a href=&quot;https://twitter.com/ttscoff&quot;&gt;ttscoff&lt;/a&gt;가 만든 플러그인(&lt;a href=&quot;https://github.com/ttscoff/JekyllPlugins/tree/master/YouTube&quot; title=&quot;JekyllPlugins/YouTube at master · ttscoff/JekyllPlugins · GitHub&quot;&gt;GitHub Repo&lt;/a&gt;)을 사용합니다. Youtube 외에 Vimeo 등을 임베딩하는 &lt;a href=&quot;https://gist.github.com/vanto/1455726&quot; title=&quot;OEmbed Liquid Tag for Jekyll&quot;&gt;OEmbed&lt;/a&gt;도 쓰려고 시도해봤으나 뭐가 문제인지 영상이 나오지 않았습니다.&lt;/p&gt;

&lt;p&gt;YouTube Jekyll Plugin은 로컬 지킬에 &amp;quot;_plugins&amp;quot; 폴더를 만들고 &amp;quot;youtube_tag.rb&amp;quot; 파일을 넣으면 사용 준비가 끝난 것입니다. 이제 글을 적다가 영상을 넣기 원하는 곳에 &lt;code&gt;{ % youtube https://www.youtube.com/watch?v=G33WiEktUo8 % }&lt;/code&gt;의 형식으로 YouTube 주소를 넣으면 됩니다. 글만 있으니 말이 나온 김에 좋은 노래 하나 삽입하고 계속 글을 이어가죠.&lt;/p&gt;

&lt;style&gt;.bt-video-container iframe,.bt-video-container object,.bt-video-container embed{position:absolute;top:0;left:0;width:100%;height:100%;margin-top:0}&lt;/style&gt;

&lt;div class=&quot;bt-video-container&quot; style=&quot;position:relative;padding-bottom:56.25%;height:auto;max-width:100%overflow:hidden&quot;&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;http://www.youtube.com/embed/G33WiEktUo8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;ttscoff의 플러그인은 반응형으로 삽입됩니다. 크기가 작은 모바일 기기에서도 영상이 잘리지 않는다는 장점이 있지요. 한 가지 마음에 들지 않는 점이 있다면 영상 위 아래로 검은 여백이 생긴다는 것이었습니다. 그래서 방법을 열심히 검색해서 &amp;lt;&lt;a href=&quot;http://embedresponsively.com/&quot;&gt;http://embedresponsively.com/&lt;/a&gt;&amp;gt;라는 사이트를 알게 되었습니다. youtube 영상 주소를 입력하면 반응형으로 임베딩할 수 있는 주소를 알려주는 곳입니다. 예를 들면 아래와 같은 형태로 나옵니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;style&amp;gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; height: auto; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&amp;lt;/style&amp;gt;&amp;lt;div class=&amp;#39;embed-container&amp;#39;&amp;gt;&amp;lt;iframe src=&amp;#39;http://www.youtube.com/embed/eqSCunKweu8&amp;#39; frameborder=&amp;#39;0&amp;#39; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 이 주소를 마크다운 문서에 그대로 붙여 넣고 사용해도 되지만 문서를 편집하면서 보기에 영 좋지 않습니다. 그래서 &amp;quot;youtube_tag.rb&amp;quot; 파일을 위 사이트에서 만들어진 주소를 참고해서 좀 변형했습니다. 그랬더니 위아래에 있던 검은 여백이 사라졌습니다. 이것으로 제가 원하는 모습의 youtube 임베딩이 가능해졌습니다. 제가 수정한 파일은 &lt;a href=&quot;/assets/youtube_tag.rb&quot;&gt;이곳&lt;/a&gt;을 누르시면 내려받을 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Nov 2014 20:04:40 +0900</pubDate>
        <link>http://halryang.github.io/embed-youtube-responsively/</link>
        <guid isPermaLink="true">http://halryang.github.io/embed-youtube-responsively/</guid>
      </item>
    
      <item>
        <title>Delete TimeMachine Backup</title>
        <description>&lt;ol&gt;
&lt;li&gt;OS X에서 휴지통이 비워지지 않을 때, terminal에 &lt;code&gt;sudo rm -rf&lt;/code&gt; 라고 적고, 터미널로 지워지지 않는 폴더를 드래그 앤 엔터.&lt;/li&gt;
&lt;li&gt;외장하드 타임머신 백업은 위의 방법으로 안된다. 터미널에서 백업에 사용했던 volume으로 &lt;code&gt;cd /Volumes/Volume이름&lt;/code&gt; 들어가서 &lt;code&gt;sudo rm -rf .Trashes&lt;/code&gt; 엔터. 이때 progress bar 같은 거 없다. 그냥 다시 &lt;code&gt;$&lt;/code&gt;커맨드 프롬프트 나올때까지 진득하니 기다려야 함.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;from &lt;a href=&quot;http://pondini.org/TM/E6.html&quot; title=&quot;Time Machine - Troubleshooting E6. Can&amp;#39;t empty the trash after deleting backups via the Finder&quot;&gt;Time Machine - Troubleshooting E6. Can&amp;#39;t empty the trash after deleting backups via the Finder&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Nov 2014 01:24:14 +0900</pubDate>
        <link>http://halryang.github.io/delete-timemachine-backup/</link>
        <guid isPermaLink="true">http://halryang.github.io/delete-timemachine-backup/</guid>
      </item>
    
      <item>
        <title>모유수유 권장 병원</title>
        <description>&lt;p&gt;2014년 11월 5일, 모유수유를 권장하는 병원이라고 버젓이 적혀 있는 산부인과에서 둘째를 출산했습니다. 모유수유를 권장한다고 적혀 있던 안내문에는 출산 후 2시간이면 엄마 젖을 물릴 수 있다고 적혀 있었습니다. 물론 그때 바로 젖이 돌지 않지만, 아이가 엄마의 젖을 인식하고 엄마와 아이의 유대관계를 형성하는 데 많은 도움이 되겠지요. 그런데 아이를 출산하고 두 시간이 지나도 병실로 아이를 데려다 준다는 얘기가 전혀 없었습니다. 저녁에 출산해서 그런 것인지 싶어서 간호사에게 물어보니 면회시간에만 아이를 볼 수 있다고 했습니다. 출산하느라 힘든 아내를 생각하는 마음으로 그날 저녁은 편하게 생각하고 그냥 자기로 했습니다.&lt;/p&gt;

&lt;p&gt;다음날이 되어 아이를 아침 면회시간이 되어 볼 수 있었고 아침 면회시간에는 미리 겉싸개를 챙겨가지 않아서인지 다음 면회시간에 겉싸개를 가져오셔서 아이를 병실로 데려가시라는 안내를 받았습니다. 기다리던 첫 아이 면회는 그렇게 길어야 3분으로 끝났습니다. 그 이후에도 수유를 위해서 아이를 보러 오라는 말은 없었습니다. 이쯤 되니 &amp;quot;모유수유 권장병원&amp;quot;이라는 단어에 의심이 갑니다.&lt;/p&gt;

&lt;p&gt;입원 3박 4일째, 원래 일주일 동안 병실조리를 하려고 했기에 이제 수유를 고민하기 시작했습니다. 젖이 돌기 시작하는 것 같아서 병원 측에 수유는 어떻게 할 수 있는지 물어봤더니 처음에 돌아온 대답은 &amp;quot;수유는 면회시간에만 할 수 있다&amp;quot;는 것이었습니다. 계속 옆에 데리고 있으면서 시도해도 쉽지 않을 수 있는 것을 하루 네 번 면회시간에만 할 수 있다니요. 아이가 먹을 때마다 전화를 해주거나 하진 않는지 물었더니 그제야 그렇게도 가능하다고 하더군요. 그런데 저녁 시간 이후에 그렇게 전화해주진 못하고 밤부터 아침까지는 분유를 먹인다고 했습니다. 마지막으로 그럼 모자동실은 어떻게 되냐고 물어봤더니 모자동실을 하시면 아이의 모든 관리는 이제 산모가 알아서 해야 한다고 했습니다. 씻기는 것도 알아서 해야 하는지 물어보니 하루에 한 번 씻겨줄 수는 있다고 했습니다.&lt;/p&gt;

&lt;p&gt;하루 한 번 씻겨주고 밥을 넣어준다고 병실조리비용을 내고 입원해있기는 너무 아깝다는 생각이 들었습니다. 가격보다는 서비스에 실망했습니다. 기반 시설과 서비스를 갖추고 수유를 권장하는 병원이라고 홍보해야지요. 특정 병원을 비난하려는 목적으로 글을 쓰고 있는 것은 아니니 병원의 이름을 적진 않겠습니다.&lt;/p&gt;

&lt;p&gt;어쨌든 이렇게 시행착오를 겪고 검색하다보니, 유니세프에서 &amp;quot;아기에게 친근한 병원&amp;quot;을 정의한 것을 찾았습니다. WHO와 Unicef가 주창한 아기에게 친근한 병원 만들기 운동에서 말하는 &lt;strong&gt;&amp;quot;성공적인 엄마젖 먹이기 10단계&amp;quot;&lt;/strong&gt;는 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;병원은 의료요원을 위한 모유수유 정책을 문서화 한다.&lt;/li&gt;
&lt;li&gt;이 정책을 실행하기 위하여 모든 의료요원에게 모유수유 기술을 훈련시킨다.&lt;/li&gt;
&lt;li&gt;엄마젖의 장점과 젖먹이는 방법을 임산부에게 교육시킨다.&lt;/li&gt;
&lt;li&gt;출생 후 30분 이내에 엄마젖을 빨리기 시작한다.&lt;/li&gt;
&lt;li&gt;임산부에게 엄마젖을 먹이는 방법과 아기와 떨어져 있을 때 젖분비를 유지하는 방법을 자세히 가르친다.&lt;/li&gt;
&lt;li&gt;갓난 아기에게 엄마젖 이외의 다른 음식물을 주지 않는다.&lt;/li&gt;
&lt;li&gt;엄마와 아기는 하루 24시간 같은 방을 쓴다.&lt;/li&gt;
&lt;li&gt;엄마젖은 아기가 원할 때마다 먹인다.&lt;/li&gt;
&lt;li&gt;아기에게 인공 젖꼭지나 노리개 젖꼭지를 물리지 않는다.&lt;/li&gt;
&lt;li&gt;엄마젖 먹이는 모임을 만들도록 도와주고 퇴원 후 모임에 참여하도록 해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;유니세프한국위원회에서는 아기에게 친근한 병원의 목록을 공개하고 있습니다. 각 병원이 실제로 얼마나 잘 적용하고 있는지는 모르지만 적어도 이 목록에 있는 병원들은 모유수유에 대한 관심이 있지 않을까요? &amp;quot;그동안 총 68개의 병원이 아기에게 친근한 병원으로 임명되었으나, 임명 후 정기적으로 실시되는 재평가를 거쳐 현재 전국 32개 병원이 아기에게 친근한 병원 타이틀을 가지고 있다&amp;quot;는 글을 보면 이 목록을 믿을만하다고 생각합니다. 모유수유를 할 예정인 부모님은 한번 &lt;a href=&quot;http://www.unicef.or.kr/education/mommy/withus_hospital.asp&quot; title=&quot;유니세프한국위원회&quot;&gt;유니세프한국위원회&lt;/a&gt;에 들러보시고 참고하시길 권합니다. 링크한 웹페이지의 가장 하단에 2014년 11월 현재 아기에게 친근한 병원 명단이 있습니다.&lt;/p&gt;

&lt;p&gt;전 유니세프나 이 목록에 속한 병원 어느 곳과도 연관이 없습니다. 아이를 낳는 것도 고생이지만, 낳고 나서 수유하는 과정에서 겪는 아픔도 곁에서 지켜보기 안타깝습니다. 그 안타까운 마음에서 저는 이 정보를 미리 발견하지 못했지만 다른 분들에게라도 도움이 되었으면 하는 마음에 글을 남깁니다. 이 글에 관심을 가지고 읽으신 분이라면 아마도 가정을 이루고 아이가 있으시거나 아이를 가지실 예정이시겠죠. 모두 건강하고 행복한 가정을 이루시길 바랍니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Nov 2014 23:32:35 +0900</pubDate>
        <link>http://halryang.github.io/breastfeeding-hospital/</link>
        <guid isPermaLink="true">http://halryang.github.io/breastfeeding-hospital/</guid>
      </item>
    
      <item>
        <title>From Wordpress To Jekyll</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://ko.wordpress.org/&quot;&gt;워드프레스&lt;/a&gt;에서 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;지킬&lt;/a&gt;로 갈아탔습니다. 워드프레스에 있던 글들은 xml 파일로 저장하고 있었기에 일부러 지운 글을 제외하고는 대부분 옮겼습니다. 다만 포스트의 고유주소가 달라져서 기존 주소로는 접근이 불가할 것 같습니다.&lt;/p&gt;

&lt;p&gt;워드프레스를 사용하면서 &lt;strong&gt;무겁다&lt;/strong&gt;고 느껴졌습니다. 제 능력 문제겠지만 최소한의 기능을 가진 테마를 사용해도 블로그가 무겁게 느껴졌습니다. 그렇다고 테마를 직접 만들기는 힘들고, 간단히 수정을 통해서 보완할 수 있는 부분엔 한계가 있었습니다. 플러그인을 적용하면 더욱 느려지는 블로그를 보면 답답합니다.&lt;/p&gt;

&lt;p&gt;지킬은 &lt;a href=&quot;https://github.com/&quot;&gt;깃허브&lt;/a&gt; 페이지를 이용해서 무료로 운영이 가능하다는 얘기를 듣고 최근 관심을 많이 갖고 있었습니다. 게다가 꽤나 빠르다고 하니 더욱 구미가 당겨서 &lt;a href=&quot;https://halryang.github.io&quot;&gt;만들어 보기&lt;/a&gt;도 했습니다. 만드는 과정은 &lt;a href=&quot;http://halryang.github.io/2014/10/17/Start-Blogging-With-Jekyll/&quot; title=&quot;GitHub pages를 이용하여 Jekyll Blog를 만들자 – Halryang&amp;#39;s Jekyll blog&quot;&gt;이 글&lt;/a&gt;에 적어 뒀습니다. 한번 만들어 보니 그리 어렵지 않게 같은 테마를 입힐 수 있겠다 싶어서 웹호스팅을 받던 공간에 워드프레스 대신 지킬을 올리기로 했습니다.&lt;/p&gt;

&lt;p&gt;일단 깃허브 페이지로 올린 테마와 같은 테마를 적용하고 워드프레스에 올렸던 글들을 불러와서 깨진 링크를 수정했습니다. 지금 이 블로그가 지킬로 만든 블로그입니다. 제가 미처 확인하지 못한 깨진 링크를 발견하시면 알려주세요. 이미지를 다 백업하지 못해서 이전 워드프레스에 올렸던 글인데도 이미지가 사라진 글도 있습니다.&lt;/p&gt;

&lt;p&gt;블로그에 내용이 그리 많지 않아서 사이트 크기 자체가 크지 않습니다. Dropbox에 로컬 폴더를 올려서 빌드하고 만들어진 &amp;quot;_site&amp;quot; 폴더를 웹호스팅 받는 ftp 서버의 public_html 폴더에 동기화하는 형태로 사용중입니다. FTP 클라이언트 앱은 맥에서 ForkLift 2를 사용하고 있습니다. ForkLift 2는 &lt;strong&gt;synclet&lt;/strong&gt;이라는 훌륭한 기능이 있습니다. 로컬 폴더와 FTP 서버의 폴더를 지정해두고 동기화 옵션을 한 번 설정하면 이후엔 synclet.app을 실행하기만 하면 미리 설정한 옵션에 따라 동기화가 진행됩니다. 깃허브 페이지를 이용할 때 commit, push 하는 두 단계가 필요하다면 웹호스팅을 받는 경우 build, synclet 실행의 두 단계로 사이트를 변경할 수 있는 것이니 그리 불편하지 않습니다.&lt;/p&gt;

&lt;p&gt;지킬을 사용하기로 결정하고 가장 마음에 드는 것은 글을 따로 백업할 필요가 전혀 없다는 것입니다. 애초에 드랍박스에 있는 글로 사이트를 빌드해서 올리는 것이니 드랍박스의 폴더를 지우지 않는 이상 웹에 올라간 글이 실수로 지워져도 데이터는 그대로 남습니다. 깃을 이용해서 문서의 버전 관리도 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;아직 플러그인이나 테마가 완성되진 않았습니다. 지금까지 한 작업은 테마를 고르고 배경색, 글자 크기 조정, 깨진 링크 수정, 이미지 삽입시 가운데 정렬, Pagination 설정입니다. 앞으로 블로그 내 검색 가능하도록 설정하는 것과 테마를 조금 더 최적화할 생각입니다. 이제 살펴보기 시작한 단계니 어쩌면 더 마음에 드는 테마를 발견하고 아예 테마를 바꾸게 될 수도 있겠지요. 후에 변경사항 중 남기고픈 사항이 있으면 또 다시 포스팅하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 08:07:11 +0900</pubDate>
        <link>http://halryang.github.io/From-Wordpress-To-Jekyll/</link>
        <guid isPermaLink="true">http://halryang.github.io/From-Wordpress-To-Jekyll/</guid>
      </item>
    
      <item>
        <title>Copy Dropbox public link url to Clipboard - Keyboard Maestro Macro</title>
        <description>&lt;h2&gt;Dropbox의 Public 폴더 안의 파일의 공유 링크를 쉽게 얻자&lt;/h2&gt;

&lt;p&gt;나처럼 Mytory markdown plugin을 사용해서 워드프레스에 포스팅하는 경우(워드프레스 포스팅 자동화에 관한 &lt;a href=&quot;http://sunjin.us/automation-for-wp-posting/&quot; title=&quot;Automation for wp posting | SUNJIN&quot;&gt;이전 글&lt;/a&gt; 참조) Dropbox의 공개링크 url이 필요하다. 그래서 Copy Dropbox public link url to Clipboard 라는 긴 이름의 Keyboard Maestro Macro를 만들었다. 매크로 이름에서 바로 오늘 소개할 매크로의 기능을 알 수 있다. Dropbox의 Public 폴더 안에 있는 파일의 공개링크주소를 클립보드에 복사한다. 이번 매크로에는 Automator로 만든 간단한 Workflow가 들어가 있다. Keyboard Maestro 내에서 파일을 선택하는 창을 띄울 수 있는지 몰라서 다른 방법을 찾다 보니 Automator를 사용하게 되었다. Keyboard Maestro에는 Automator workflow를 실행하는 액션이 있어서 Automator로 만든 workflow도 잘 녹아든다.&lt;/p&gt;

&lt;h3&gt;이 매크로의 장점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;어느 앱에서 무슨 일을 하던 중에라도 Public 폴더 내의 파일을 선택하여 공개링크를 얻을 수 있다.&lt;/li&gt;
&lt;li&gt;Dropbox의 Public 폴더 내의 파일이라면 어떤 파일이든 공개 링크를 얻을 수 있다.&lt;/li&gt;
&lt;li&gt;Public 폴더 내의 하위 폴더에 들어가 있어도 전혀 문제 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;필요사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LaunchBar&lt;/li&gt;
&lt;li&gt;Keyboard Maestro&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href=&quot;http://dl.dropboxusercontent.com/u/18183807/Copy%20Dropbox%20public%20link%20url%20to%20Clipboard.kmmacros&quot;&gt;Copy Dropbox public link url to Clipboard&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropboxusercontent.com/u/18183807/wp/URLtoCl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;군더더기 없이 단순하다. &amp;#39;CopyPublicLink&amp;#39;라는 Automator workflow를 실행한 다음 &amp;#39;Dropbox public path to url&amp;#39;이라는 Keyboard Maestro Macro를 실행하는 두 단계로 나뉘어 있다. &lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;http://dl.dropboxusercontent.com/u/18183807/CopyPublicLink.workflow&quot;&gt;Copy Public Link&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropboxusercontent.com/u/18183807/wp/automatorPL.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automator Workflow는 새로운 Finder 윈도우를 열어 파일을 선택하는 것으로 시작한다. 여기서는 편의를 위해 Finder 창이 열릴 때 Dropbox의 Public 폴더를 기본으로 열도록 설정했다. 그 후엔 LaunchBar를 거쳐 &amp;#39;Copy to Clipboard&amp;#39; 액션으로 해당 파일의 경로를 클립보드에 복사한다.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;http://dl.dropboxusercontent.com/u/18183807/Dropbox%20public%20path%20to%20url.kmmacros&quot;&gt;Dropbox public path to url&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropboxusercontent.com/u/18183807/wp/kmmPtURL.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Dropbox public path to url 매크로에서는 위에서 얻어낸 파일의 경로를 공개링크 url로 바꾸어 클립보드에 저장한다. 나의 경우 Dropbox의 Public 폴더 내의 파일 경로는 &lt;code&gt;/Users/JF/Dropbox/Public/[파일명].[확장자]&lt;/code&gt;이다. 맥에서 기본적인 경로에 Dropbox를 설치한 사람이라면 나와 비슷한 경로를 가질 것이다. 여기서 &lt;code&gt;/Users/[사용자명]/Dropbox/Public/&lt;/code&gt;을 &lt;code&gt;http://dl.dropboxusercontent.com/u/[Dropbox-사용자-코드]/&lt;/code&gt;로 바꿔야 한다. 그리고 파일명에 공백이 들어간 경우 &lt;code&gt;%20&lt;/code&gt;과 같이 인코딩을 해야 url로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dropbox-사용자-코드&lt;/code&gt;에 들어갈 코드는 Dropbox의 Public 폴더 내의 아무 파일이나 우클릭해서 &amp;#39;공개 링크 복사&amp;#39;를 하면 &lt;code&gt;http://dl.dropboxusercontent.com/u/123456/[파일명].[확장자]&lt;/code&gt;와 같이 클립보드에 복사된다. 위의 예에서는 &amp;#39;123456&amp;#39;이 본인의 Dropbox code이다.&lt;/p&gt;

&lt;p&gt;이제 이 매크로를 액션 순서대로 설명하면 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/Users/[사용자명]/Dropbox/Public/&lt;/code&gt;을 지운다.&lt;/li&gt;
&lt;li&gt;남은 &lt;code&gt;[Public-folder-안의-하위폴더]/[파일명].[확장자]&lt;/code&gt;를 URL을 위해 퍼센트 인코딩한다.&lt;/li&gt;
&lt;li&gt;클립보드에 앞에 &lt;code&gt;http://dl.dropboxusercontent.com/u/[Dropbox-사용자-코드]/&lt;/code&gt;를 추가하여 클립보드에 복사한다.&lt;/li&gt;
&lt;li&gt;확인을 위해 클립보드에 복사된 내용을 잠시 보여준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;마지막으로 클립보드에 복사되는 url 주소는 &lt;code&gt;http://dl.dropboxusercontent.com/u/[Dropbox-사용자-코드]/[Public-folder-안의-하위폴더]/[파일명].[확장자]&lt;/code&gt;이다. 물론 Public 폴더 안에 또다른 하위 폴더에 들어가 있는 파일이 아니라면 &lt;code&gt;http://dl.dropboxusercontent.com/u/[Dropbox-사용자-코드]/[파일명].[확장자]&lt;/code&gt;의 형태로 클립보드에 복사된다.&lt;/p&gt;

&lt;h3&gt;매크로 사용법&lt;/h3&gt;

&lt;p&gt;스크립트를 알면 훨씬 간단하게 매크로를 작성할 수 있겠다 싶었는데, Keyboard Maestro Macro 공유하는 방법을 검색하다가 &lt;a href=&quot;http://mattgemmell.com/keyboard-maestro-macros/&quot; title=&quot;Keyboard Maestro macros - Matt Gemmell&quot;&gt;Matt Gemmell의 블로그&lt;/a&gt;에서 정말 간단한 &lt;a href=&quot;https://dl.dropboxusercontent.com/u/18183807/Finder%20macros.kmlibrary&quot;&gt;매크로&lt;/a&gt;를 발견했습니다. 파인더에서 파일 선택해서 매크로 실행하면 선택한 파일을 Dropbox의 Public 폴더로 이동하고, 공개링크주소는 클립보드에 복사됩니다. 역시 무식하면 저처럼 손발이 고생합니다.&lt;/p&gt;

&lt;p&gt;다만 위의 &lt;a href=&quot;https://dl.dropboxusercontent.com/u/18183807/Finder%20macros.kmlibrary&quot;&gt;매크로&lt;/a&gt;를 사용해보니 최종 클립보드에 복사된 url이 인코딩이 되지 않았습니다. 위에 링크한 매크로를 사용하시는 경우 퍼센트 인코딩 클립보드 필터 액션을 추가하여 사용하세요. 이 매크로는 Finder를 열어 원하는 파일을 선택한 상태에서 Trigger 하셔야 작동합니다.&lt;/p&gt;

&lt;p&gt;제가 만든 매크로에 따로 단축키는 설정하지 않은 상태이니 원하는 단축키를 설정해서 사용하면 됩니다. 저는 &amp;quot;⌘⌥^ T&amp;quot; 단축키를 사용하여 Trigger by name 패널에 &amp;quot;cdp&amp;quot;라고 입력해서 매크로를 실행하고 있습니다. 편한 방법으로 사용하시기 바랍니다. 이 글에 나온 Keyboard Maestro 매크로와 워크플로우는 아래에서 내려 받을 수 있습니다.&lt;/p&gt;

&lt;h3&gt;Keyboard Maestro 매크로와 워크플로우 다운로드 링크&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Copy Dropbox public link url to Clipboard: Keyboard Maestro Macro file(.kmmacros) &amp;gt;&amp;gt; &lt;a href=&quot;http://dl.dropboxusercontent.com/u/18183807/Copy%20Dropbox%20public%20link%20url%20to%20Clipboard.kmmacros&quot;&gt;다운로드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Copy Public Link: Automator workflow file(.workflow) &amp;gt;&amp;gt; &lt;a href=&quot;http://dl.dropboxusercontent.com/u/18183807/CopyPublicLink.workflow&quot;&gt;다운로드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dropbox public path to url: Keyboard Maestro Macro file(.kmmacros) &amp;gt;&amp;gt; &lt;a href=&quot;http://dl.dropboxusercontent.com/u/18183807/Dropbox%20public%20path%20to%20url.kmmacros&quot;&gt;다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Oct 2014 23:35:35 +0900</pubDate>
        <link>http://halryang.github.io/getsharableurl/</link>
        <guid isPermaLink="true">http://halryang.github.io/getsharableurl/</guid>
      </item>
    
      <item>
        <title>GitHub pages를 이용하여 Jekyll Blog를 만들자</title>
        <description>&lt;h1&gt;Intro&lt;/h1&gt;

&lt;p&gt;GitHub pages를 이용하여 Jekyll Blog를 만들어 봤다. 기본적인 지식도 제대로 갖추지 못한 내가 CLI를 MS-DOS시절 이후 오랜만에 조금씩 써가면서 만드는데 도움이 된 글들을 먼저 링크하고 싶다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nolboo.github.io/blog/2013/10/15/free-blog-with-github-jekyll/&quot;&gt;지킬로 깃허브에 무료 블로그 만들기 - @n0lb00&amp;#39;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pixelcog.com/blog/2013/jekyll-from-scratch-introduction/&quot;&gt;Jekyll From Scratch - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;&lt;strong&gt;Using Jekyll with Pages&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가장 도움이 된 글은 역시 굵게 표시한 마지막 링크 글이다. GitHub help 페이지에서 Jekyll을 Pages와 어떻게 함께 사용할 수 있는지 잘 설명했다.&lt;/p&gt;

&lt;h2&gt;준비단계&lt;/h2&gt;

&lt;p&gt;블로그를 만들기 전 나의 환경은 다음과 같았다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Macbook Air 2012 13inch&lt;/li&gt;
&lt;li&gt;GitHub 미가입: 이전에 가입한 줄 알았는데 아니었다.&lt;/li&gt;
&lt;li&gt;X-code 미설치&lt;/li&gt;
&lt;li&gt;프로그래밍에 대한 배경 지식 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Jekyll을 설치하기 위한 요구사항&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ruby (Development headers를 포함)&lt;/li&gt;
&lt;li&gt;RubyGems&lt;/li&gt;
&lt;li&gt;Linus, Unix, or Mac OS X&lt;/li&gt;
&lt;li&gt;NodeJS, or another JavaScript runtime (for CoffeeScript support)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 나는 이 항목들 각각이 무엇을 의미하는지도 모른다. 그러나 용감히 시도해보기로 했다.&lt;/p&gt;

&lt;h3&gt;Xcode, Command-Line Tools 설치&lt;/h3&gt;

&lt;p&gt;Mac OS X에서 Jekyll을 설치하기 위해 가장 먼저 해야 하는 것은 Xcode와 Command-Line Tools를 설치하는 일이었다. Xcode는 App store에서 검색해서 쉽게 설치할 수 있었으나 &amp;#39;Preferences → Downloads → Components&amp;#39;에 들어가도 Command-Line Tools를 다운로드 하는 것이 보이지 않았다. 결국 따로 구글링해서 &lt;a href=&quot;http://railsapps.github.io/xcode-command-line-tools.html&quot;&gt;Xcode Command Line Tools for Mac OS X 10.10 Yosemite · RailsApps&lt;/a&gt; 페이지를 보고 CLI 명령어를 입력하여 설치할 수 있었다.&lt;/p&gt;

&lt;h2&gt;Jekyll을 설치하자&lt;/h2&gt;

&lt;p&gt;Xcode와 Command-Line Tools를 설치하고 나니 이제 gem install jekyll이 정상 작동했다! 야호!!! 작동이 되고 나면 상당히 빠른 시간 안에 Jekyll 설치가 끝난다. 약간 허무하다. 이제 로컬 디렉토리(내 맥북 안 어딘가)에 지킬을 설치하고 온라인 GitHub에 블로그를 올릴 수 있게 설정하면 된다.&lt;/p&gt;

&lt;h3&gt;로컬 디렉토리 Jekyll 설치&lt;/h3&gt;

&lt;p&gt;이 문서 저 문서 보면서 하다보니 여기저기에서 약간씩 섞였다. 나는 로컬 디렉토리 이름은 blog로 로컬 디렉토리에 설치했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 입력하면 된다. 엄청 간단하다. 이렇게 blog라는 디렉토리에 Jekyll을 설치했다. Jekyll 설치가 잘 되었는지 확인한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd blog
jekyll serve -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 명령어를 입력하고 Localhost:4000 이라고 사파리 주소창에 입력하면 로컬에 설치된 Jekyll이 어떻게 보이는지 확인할 수 있다.&lt;/p&gt;

&lt;h3&gt;GitHub에 Repository 만들기&lt;/h3&gt;

&lt;p&gt;GitHub를 이용하면 무료로 Jekyll 블로그를 만들 수 있다는 글을 보고 만들기 시작한 것이므로 당연히 GitHub pages를 이용하기 위해 GitHub 계정을 만들었다. Repository는 내가 만든 파일들과 폴더들을 올려놓을 수 있는 공간인 듯하다. Repository를 흔히 Repo라고 줄여 말하는 것 같아 나도 경제적으로 아래에는 Repo라고 적겠다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GitHub에 가입을 한다.&lt;/li&gt;
&lt;li&gt;E-mail verification을 한다. (권고하는 사항이므로 바로 했다)&lt;/li&gt;
&lt;li&gt;Repo 만들기를 누른다. (무료로 공개 Repo는 여러 개 생성 가능)&lt;/li&gt;
&lt;li&gt;나는 Repo 이름을 halryang.github.io 라고 정했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;로컬 디렉토리를 GitHub repo에 올리기&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git init
$ git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;initial commit&amp;quot;
$ git remote add origin GitHubRepo주소
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나는 이 과정이 가장 힘들었다. 처음엔 GitHub Repo 주소를 넣는 곳에 &amp;quot;.git&amp;quot;을 입력하지 않아서 push가 되지 않는 것을 왜 안 되지 하고 살펴보고 있었다. CLI는 오타를 용납하지 않으니 명령어를 넣을 때 잘 살펴서 입력해야 한다. 이런 문제를 수정하고서도 Jekyll을 설치한 로컬 디렉토리에서 Repo에 몇 번을 push해도 halryang.github.io에 들어가면 아무런 페이지가 뜨지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;Using Jekyll with Pages&lt;/a&gt;를 참고하여 Bundler를 설치하고 Gemfile을 만들어서 로컬 디렉토리에 넣은 후 bundle install을 하니 그제서야 halryang.github.io 에서 Jekyll을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;gem install github-pages 를 통해서도 Jekyll을 설치할 수 있으나 문제가 발생할 수 있다고 적혀 있다(If you decided to skip step #2, you can still install Jekyll with the command gem install github-pages, but you may run into trouble down the line).&lt;/p&gt;

&lt;p&gt;gemfile과 Gemfile.lock이 생성되어 새로 push하는 방법을 몰라서 git add 명령어를 배우게 되었다. 겨우 Push만 했을 뿐 아직 익히진 못했다.&lt;/p&gt;

&lt;h2&gt;이제 블로그를 커스터마이징하자&lt;/h2&gt;

&lt;h3&gt;Jekyll을 configure하는 방법&lt;/h3&gt;

&lt;p&gt;거창하게 커스터마이징이라고 적었지만 내가 지금까지 한 것은 겨우 블로그 이름(title), 간략한 설명(description), email 주소, 트위터 사용자명, GitHub 사용자명, markdown 세팅을 바꾼 것 뿐이다. 이 모든 설정은 _config.yml 파일에 들어 있으니 로컬 디렉토리에서 이것을 수정하여 저장하고 git add, git push하면 된다.&lt;/p&gt;

&lt;h3&gt;테마 적용, 스타일 변경&lt;/h3&gt;

&lt;p&gt;Jekyll 또한 많은 테마가 이미 나와있고 테마를 적용하고 나서도 개인 취향에 따라 css 변경 등을 통해 입맛에 맞는 사이트를 만들 수 있다. 나는 이제 시작하는 입장이므로 지금은 테마 적용, 스타일 변경, 플러그인 추가를 하지 않았다. 후에 테마를 적용하면 그것을 주제로 또 포스팅을 할 예정이다.&lt;/p&gt;

&lt;h2&gt;이제 글을 써보자&lt;/h2&gt;

&lt;p&gt;지금까지 Jekyll을 GitHub에 올리고 halryang.github.io 라는 주소를 통해서 들어가려고 많은 과정을 거쳤다. 이제 드디어 블로그에 글을 올릴 수 있다. 기본적인 개념은 내가 원하는 글을 마크다운으로 작성해서 로컬 디렉토리에 _post 폴더에 넣은 후 push 하면 GitHub에 파일이 올라가고 그 파일을 Jekyll이 보기 좋게 뿌려주는 것이다.&lt;/p&gt;

&lt;h3&gt;블로그 포스팅의 원칙&lt;/h3&gt;

&lt;p&gt;WISWIG(What I See What I Get) 방식으로 글을 발행하는 여타 많은 블로그와 달리 Jekyll은 각 블로그 글마다 파일이 따로 있다. Jekyll이 각각의 파일을 보여주는 것이다. 따라서 글을 발행하려면 글을 파일로 로컬 디렉토리에 저장해야 한다. 이때 블로그 포스트는 반드시 _post 안에 넣어야 한다. Jekyll은 이 폴더에 있는 파일만 블로그 포스트로 인식한다. 그리고 블로그 포스트 파일명은 항상 &lt;em&gt;YYYY-MM-DD-post-name.확장자&lt;/em&gt;(나는 마크다운으로 작성하고 보통 &lt;strong&gt;md&lt;/strong&gt;확장자를 사용한다) 형식으로 지정되어야 한다.&lt;/p&gt;

&lt;p&gt;블로그 포스트는 항상 파일의 제일 앞에 front matter를 적어야 한다. Jekyll은 front matter 블록으로 시작되는 파일만 처리한다. 각 블로그 포스트의 front matter에는 &amp;quot;title&amp;quot;과 &amp;quot;layout&amp;quot; 필드는 반드시 들어가야 한다. date는 파일 이름에 들어가니 필수는 아니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---
title: 여기에 글 제목을 입력한다
layout: post
---

이제 여기에 글 내용을 입력한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 입력하면 된다. 이렇게 글을 입력하고 파일을 _post에 저장하고 add, push 했으면 Jekyll 블로그에서 글이 어떻게 보이는지 확인하는 일만 남았다.&lt;/p&gt;

&lt;h2&gt;이제 시작이다&lt;/h2&gt;

&lt;p&gt;지금까지 Jekyll과 GitHub pages를 이용해서 정말 아무 것도 모르는 초보가 무료로 블로그를 하나 만들어 보는 과정을 정리했다. 혹시나 이 글이 다른 사람에게도 도움이 되면 정말 좋겠다.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Oct 2014 00:00:00 +0900</pubDate>
        <link>http://halryang.github.io/Start-Blogging-With-Jekyll/</link>
        <guid isPermaLink="true">http://halryang.github.io/Start-Blogging-With-Jekyll/</guid>
      </item>
    
      <item>
        <title>대나무 팜레스트 구매</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://files.app.net/1/1349886/afGpEEuvGkJICtcaZ5ndWGQygaJ0x25LS4oE0Ve5SLc0zHNXA8BK-MV-1hdlm0czOMrQhejWEipoVejrIH4PXjbAp97vF0614vHGeodDh2KaMeo3b-zkERk69grg9ZPW6AsX0MZ0_oim9M9kprF5-mPqyyj5kTHgGJENt-I87L3HGDHu1xabcCAR_KkNth1un&quot; alt=&quot;Bamboo Palmrest&quot;&gt;&lt;/p&gt;

&lt;p&gt;직장 업무환경을 계속해서 저에게 맞도록 꾸미는 중입니다. 저는 기계식키보드를 사용중이고, 꼭 업무에 필요한 일 외에 제가 하는 것들은 모두 Macbook Air 2012 13inch를 이용해서 하고 있습니다. 아무래도 맥북을 모니터에 물려서 사용하다보니 맥북을 그냥 열어둘 필요까진 없어서 매직트랙패드를 구입하여 쓰고 있습니다. 그런데 이제는 키보드를 두드릴때 손목에 조금 부담이 오는걸 느껴서 그동안 생각만 해오던 팜레스트를 알아봤습니다. ADN에서 친분을 쌓은 분의 도움으로 대나무 팜레스트를 알게 되었고, 그리 비싸지 않은 가격으로 판매하고 있었기에 바로 주문했습니다. 제가 주문한 곳은 바로 &lt;a href=&quot;http://cafe.naver.com/bbwoodtech.cafe&quot;&gt;&lt;strong&gt;이곳&lt;/strong&gt;&lt;/a&gt;에서 확인하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;팜레스트 견적부터 실제 물건을 받기까지 과정은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;팜레스트 견적 요청&lt;/strong&gt;: 필요에 따라 사이즈와 라운딩 처리 등등을 선택할 수 있습니다.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;팜레스트 견적 요청 답변 확인&lt;/strong&gt;: 이 과정에서 가격을 알 수 있습니다. 보통 텐키리스 사이즈와 풀배열 키보드 사이즈에 맞춘 팜레스트의 가격은 정해져 있습니다.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주문서 작성&lt;/strong&gt;: 사이즈와 옵션을 선택했으면 주문서를 작성합니다.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;입금&lt;/strong&gt;: 주문서 작성 후 입금하고 입금확인을 요청하는 글을 작성합니다.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;입금확인여부 확인&lt;/strong&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;배송상태 확인&lt;/strong&gt;: 제가 주문한 곳에서는 매일 주문한 물건들이 작업중인지, 배송은 언제 예정인지, 배송되었는지를 게시하고 있습니다. 기성품이 아닌만큼 주문 확인 후에 작업하여 내보내는 것으로 기다림의 시간이 필요합니다.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;물건 확인&lt;/strong&gt;: 팜레스트를 받고 나면 주문한 사항대로 잘 제작되어 왔는지 확인합니다.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;제가 이곳에서 대나무 팜레스트를 구매하면서 약간 아쉬운 것은 배송이 완료되었다고 한 이후로도 송장번호를 따로 알려주지 않아서 물건이 어떻게 어디까지 왔는지 중간에 확인이 불가능하다는 점입니다. 그래도 물건은 잘 배송되었고, 마감 상태도 좋아서 &lt;strong&gt;팜레스트 자체에 대해서는 매우 만족&lt;/strong&gt;합니다. 팜레스트를 사용하니 확실히 손목에 무리가 덜어지는 느낌입니다. 지금은 팜레스트에 범폰을 붙이지 않아서 팜레스트가 제멋대로 미끄러지지만, 곧 범폰을 사서 부착할 예정입니다.&lt;/p&gt;

&lt;p&gt;이제 조금 더 손목이 편안하게 계속해서 키보딩을 즐길 수 있게 되었습니다. 좋은 환경이 갖춰질수록 더 많이 키보드를 두드리고 싶어지는 것은 당연한 일이지요? 네, 전 키보드를 좋아합니다. :)&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jun 2014 18:45:39 +0900</pubDate>
        <link>http://halryang.github.io/bamboo-palmrest/</link>
        <guid isPermaLink="true">http://halryang.github.io/bamboo-palmrest/</guid>
      </item>
    
  </channel>
</rss>